[
  {
    "Id": "535287",
    "ThreadId": "238247",
    "Html": "\r\n<p></p>\r\n<div style=\"color:black; background-color:white\">\r\n<pre><span style=\"color:#008080\"><span style=\"color:#008000\">I am trying to iterate through all messages in all the folders of a PST. I have pasted two functions that should be functionally the same.</span></span></pre>\r\n<pre><span style=\"color:#008080\"><span style=\"color:#008000\">iterate_folders_1(myfile) works fine, wherease iterate_folders_2(myfile) throws an out_of_bound exception at the very first folder.</span></span></pre>\r\n<pre><span style=\"color:#008000\">Can someone point out where I am going wrong?</span></pre>\r\n<pre style=\"color:black\"><span style=\"color:green\"><br></span></pre>\r\n<pre style=\"color:black\"><span style=\"color:green\">// This iterates properly through all the folders without issue.</span>\r\n<span style=\"color:blue\">void</span> iterate_folders_1 (pst &amp;myfile)\r\n{\r\n  wcout &lt;&lt; <span style=\"color:#a31515\">&quot;*** Iterating through folders using dereferenced message_iterator&quot;</span> &lt;&lt; endl;\r\n  <span style=\"color:blue\">for</span> (pst::folder_iterator iter = myfile.folder_begin();\r\n       iter != myfile.folder_end();\r\n       &#43;&#43;iter) {\r\n    folder fold = *iter;\r\n\r\n    wcout &lt;&lt; <span style=\"color:#a31515\">&quot;Folder: &quot;</span>      &lt;&lt; setw(30) &lt;&lt; left &lt;&lt; fold.get_name()\r\n          &lt;&lt; <span style=\"color:#a31515\">&quot;# Messages : &quot;</span> &lt;&lt; setw(6) &lt;&lt; right &lt;&lt; fold.get_message_count()\r\n          &lt;&lt; endl;\r\n\r\n    <span style=\"color:blue\">int</span> i = 0;\r\n    folder::message_iterator iter_m = fold.message_begin();\r\n\r\n    <span style=\"color:blue\">while</span> (iter_m != fold.message_end()) {\r\n      <span style=\"color:blue\">int</span> num_recipients = iter_m-&gt;get_recipient_count();\r\n      cout &lt;&lt; <span style=\"color:#a31515\">&quot;Message # &quot;</span> &lt;&lt; setw(4) &lt;&lt; i &lt;&lt; <span style=\"color:#a31515\">&quot; num_recipients = &quot;</span>\r\n           &lt;&lt; num_recipients &lt;&lt; endl;\r\n      \r\n      &#43;&#43;iter_m;\r\n      &#43;&#43;i;\r\n    }\r\n  }\r\n}\r\n\r\n<span style=\"color:green\">// This causes an exception as the while loop does not terminate properly</span>\r\n<span style=\"color:blue\">void</span> iterate_folders_2 (pst &amp;myfile)\r\n{\r\n  wcout &lt;&lt; <span style=\"color:#a31515\">&quot;*** Iterating through folders using message_iterator&quot;</span> &lt;&lt; endl;\r\n  <span style=\"color:blue\">for</span> (pst::folder_iterator iter = myfile.folder_begin();\r\n       iter != myfile.folder_end();\r\n       &#43;&#43;iter) {\r\n\r\n    wcout &lt;&lt; <span style=\"color:#a31515\">&quot;Folder: &quot;</span>      &lt;&lt; setw(30) &lt;&lt; left &lt;&lt; iter-&gt;get_name()\r\n          &lt;&lt; <span style=\"color:#a31515\">&quot;# Messages : &quot;</span> &lt;&lt; setw(6) &lt;&lt; right &lt;&lt; iter-&gt;get_message_count()\r\n          &lt;&lt; endl;\r\n\r\n    <span style=\"color:blue\">int</span> i = 0;\r\n    folder::message_iterator iter_m = iter-&gt;message_begin();\r\n\r\n    <span style=\"color:blue\">while</span> (iter_m != iter-&gt;message_end()) {\r\n      <span style=\"color:blue\">int</span> num_recipients = iter_m-&gt;get_recipient_count();\r\n      cout &lt;&lt; <span style=\"color:#a31515\">&quot;Message # &quot;</span> &lt;&lt; setw(4) &lt;&lt; i &lt;&lt; <span style=\"color:#a31515\">&quot; num_recipients = &quot;</span>\r\n           &lt;&lt; num_recipients &lt;&lt; endl;\r\n      \r\n      &#43;&#43;iter_m;\r\n      &#43;&#43;i;\r\n    }\r\n  }\r\n}\r\n\r\n<span style=\"color:blue\">int</span> main (<span style=\"color:blue\">int</span> argc, <span style=\"color:blue\">char</span> *argv[])\r\n{\r\n  <span style=\"color:blue\">if</span> (argc &lt; 2) {\r\n    std::cerr &lt;&lt; <span style=\"color:#a31515\">&quot;Usage: ./pst_reader &lt;pst_file&gt;&quot;</span> &lt;&lt; std::endl;\r\n    <span style=\"color:blue\">return</span> -1;\r\n  }\r\n\r\n  std::string  s(<span style=\"color:#a31515\">&quot;a.pst.pst&quot;</span>);\r\n  std::wstring filename(s.begin(), s.end());\r\n\r\n  pst myfile(filename);\r\n\r\n  wcout &lt;&lt; <span style=\"color:#a31515\">&quot;Filename = &quot;</span> &lt;&lt; filename &lt;&lt; endl;\r\n  \r\n  iterate_folders_1(myfile);\r\n  iterate_folders_2(myfile);\r\n\r\n  <span style=\"color:blue\">return</span> 0;\r\n}\r\n\r\n</pre>\r\n</div>\r\n<p></p>\r\n",
    "PostedDate": "2010-12-13T18:01:17.033-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535298",
    "ThreadId": "238247",
    "Html": "\r\n<p>The issue is that folder_iterators (and message_iterators) are what's called <em>\r\nproxy</em>&nbsp;iterators. Their operator* returns by value, constructing a new object each time it's dereferenced.</p>\r\n<p>In your first example, you store off the result of *iter in a folder object. This is good.</p>\r\n<p>In your second example, you're derefencing the folder iterator multiple times (in the message_begin and message_end call). Each deference returns a\r\n<em>different</em>&nbsp;folder object, and as such their iterators are not comparing equal, so you're walking over the end of the message range.</p>\r\n<p>Basically, we don't actually have a collection of folder objects or message objects in memory to iterate over, like we would if they were in an STL container. The number if potentially unbounded, and we have to do disk I/O to construct that list. To be performant\r\n we have to construct them on demand as the iterator is moved through the file.</p>\r\n<p>So how to do that is a design issue. An alternative design would call for the iterator to keep a local copy of the folder object it points to and return a reference to the same copy on each dereference. This has this problem though:</p>\r\n<p>&nbsp;</p>\r\n<pre>folder&amp; f = *iter; // f is a reference to whatever iter points to now\r\nwcout &lt;&lt; f.get_name(); // works as you'd expect\r\n&#43;&#43;iter;\r\nwcout &lt;&lt; f.get_name(); // not the same as above!</pre>\r\n<p>&nbsp;</p>\r\n",
    "PostedDate": "2010-12-13T18:57:21.327-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "535308",
    "ThreadId": "238247",
    "Html": "\r\n<p>Terry, thanks for the prompt reply.&nbsp;It's a bit non-intuitive for a noob, but certainly not something one can't get used to with time :) Thanks, again.</p>\r\n<p>Cheers.</p>\r\n",
    "PostedDate": "2010-12-13T19:42:34.65-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]