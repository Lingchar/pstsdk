[
  {
    "Id": "565320",
    "ThreadId": "245820",
    "Html": "\r\n<p>Hello,&nbsp;<br>\r\nI'm using the latest sdk, and I'm getting unexpected page errors on some of the psts.</p>\r\n<p>Here are the cases:</p>\r\n<p>- occurs when trying to simply load the pst</p>\r\n<p>pstsdk.definition.exception.PstSdkException: Error creating object from node ---&gt; System.Runtime.InteropServices.SEHException: External component has thrown an exception.&nbsp;&nbsp; at _CxxThrowException(Void* , _s__ThrowInfo* )&nbsp;&nbsp; at pstsdk.database_impl&lt;unsigned\r\n __int64&gt;.read_page_data(database_impl&lt;unsigned __int64&gt;* , vector&lt;unsigned char\\,std::allocator&lt;unsigned char&gt; &gt;* , page_info* pi) in pstsdk\\pstsdk\\ndb\\database.h:line 305&nbsp;&nbsp; at pstsdk.database_impl&lt;unsigned __int64&gt;.read_nbt_page(database_impl&lt;unsigned\r\n __int64&gt;* , shared_ptr&lt;pstsdk::bt_page&lt;unsigned long\\,pstsdk::node_info&gt; &gt;* , page_info* pi) in pstsdk\\pstsdk\\ndb\\database.h:line 515&nbsp;&nbsp; at pstsdk.database_impl&lt;unsigned __int64&gt;.read_nbt_root(database_impl&lt;unsigned __int64&gt;*\r\n , shared_ptr&lt;pstsdk::bt_page&lt;unsigned long\\,pstsdk::node_info&gt; &gt;* ) in pstsdk\\pstsdk\\ndb\\database.h:line 336&nbsp;&nbsp; at pstsdk.database_impl&lt;unsigned __int64&gt;.lookup_node_info(database_impl&lt;unsigned __int64&gt;* , node_info* , UInt32\r\n nid) in pstsdk\\pstsdk\\ndb\\database.h:line 541&nbsp;&nbsp; at pstsdk.database_impl&lt;unsigned __int64&gt;.lookup_node(database_impl&lt;unsigned __int64&gt;* , node* , UInt32 nid) in pstsdk\\pstsdk\\ndb\\database.h:line 79</p>\r\n<p>- occurs when trying to iterate the folders</p>\r\n<p>pstsdk.definition.exception.PstSdkException: Error creating object from subnode ---&gt; pstsdk.definition.exception.PstSdkException: Error constructing NodeIdCollection instance. ---&gt; pstsdk.definition.exception.PstSdkException: Error constructing NodeIdEnumerator\r\n instance. ---&gt; System.Runtime.InteropServices.SEHException: External component has thrown an exception.&nbsp;&nbsp; at _CxxThrowException(Void* , _s__ThrowInfo* )&nbsp;&nbsp; at pstsdk.database_impl&lt;unsigned __int64&gt;.read_page_data(database_impl&lt;unsigned\r\n __int64&gt;* , vector&lt;unsigned char\\,std::allocator&lt;unsigned char&gt; &gt;* , page_info* pi) in pstsdk\\pstsdk\\ndb\\database.h:line 305&nbsp;&nbsp; at pstsdk.database_impl&lt;unsigned __int64&gt;.read_nbt_page(database_impl&lt;unsigned __int64&gt;* , shared_ptr&lt;pstsdk::bt_page&lt;unsigned\r\n long\\,pstsdk::node_info&gt; &gt;* , page_info* pi) in pstsdk\\pstsdk\\ndb\\database.h:line 515&nbsp;&nbsp; at pstsdk.bt_nonleaf_page&lt;unsigned long,pstsdk::node_info&gt;.get_child(bt_nonleaf_page&lt;unsigned long\\,pstsdk::node_info&gt;* , UInt32 pos) in pstsdk\\pstsdk\\ndb\\page.h:line\r\n 222&nbsp;&nbsp; at pstsdk.bt_nonleaf_page&lt;unsigned long,pstsdk::node_info&gt;.get_child(bt_nonleaf_page&lt;unsigned long\\,pstsdk::node_info&gt;* , UInt32 )&nbsp;&nbsp; at pstsdk.btree_node_nonleaf&lt;unsigned long,pstsdk::node_info&gt;.next(btree_node_nonleaf&lt;unsigned\r\n long\\,pstsdk::node_info&gt;* , btree_iter_impl&lt;unsigned long\\,pstsdk::node_info&gt;* iter) in pstsdk\\pstsdk\\util\\btree.h:line 399&nbsp;&nbsp; at pstsdk.btree_node_leaf&lt;unsigned long,pstsdk::node_info&gt;.next(btree_node_leaf&lt;unsigned long\\,pstsdk::node_info&gt;*\r\n , btree_iter_impl&lt;unsigned long\\,pstsdk::node_info&gt;* iter) in pstsdk\\pstsdk\\util\\btree.h:line 321&nbsp;&nbsp; at pstsdk.const_btree_node_iter&lt;unsigned long,pstsdk::node_info&gt;.increment(const_btree_node_iter&lt;unsigned long\\,pstsdk::node_info&gt;*\r\n ) in pstsdk\\pstsdk\\util\\btree.h:line 243&nbsp;&nbsp; at boost.filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;,pstsdk::const_btree_node_iter&lt;unsigned long,pstsdk::node_info&gt; &gt;.satisfy_predicate(filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;\\,pstsdk::const_btree_node_iter&lt;unsigned\r\n long\\,pstsdk::node_info&gt; &gt;* ) in boost\\iterator\\filter_iterator.hpp:line 100&nbsp;&nbsp; at boost.filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;,pstsdk::const_btree_node_iter&lt;unsigned long,pstsdk::node_info&gt; &gt;.increment(filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;\\,pstsdk::const_btree_node_iter&lt;unsigned\r\n long\\,pstsdk::node_info&gt; &gt;* ) in boost\\iterator\\filter_iterator.hpp:line 90&nbsp;&nbsp; at boost.iterator_facade&lt;boost::filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;,pstsdk::const_btree_node_iter&lt;unsigned long,pstsdk::node_info&gt; &gt;,pstsdk::node_info,boost::bidirectional_traversal_tag,pstsdk::node_info\r\n const &amp;,int&gt;.&#43;&#43;(iterator_facade&lt;boost::filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;\\,pstsdk::const_btree_node_iter&lt;unsigned long\\,pstsdk::node_info&gt; &gt;\\,pstsdk::node_info\\,boost::bidirectional_traversal_tag\\,pstsdk::node_info const \\&amp;\\,int&gt;*\r\n ) in boost\\iterator\\iterator_facade.hpp:line 664&nbsp;&nbsp; at boost.operator&#43;&#43;&lt;class boost::filter_iterator&lt;struct pstsdk::is_nid_type&lt;2&gt;,class pstsdk::const_btree_node_iter&lt;unsigned long,struct pstsdk::node_info&gt; &gt;,struct pstsdk::node_info,struct\r\n boost::bidirectional_traversal_tag,struct pstsdk::node_info const &amp;,int&gt;(filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;\\,pstsdk::const_btree_node_iter&lt;unsigned long\\,pstsdk::node_info&gt; &gt;* , iterator_facade&lt;boost::filter_iterator&lt;pstsdk::is_nid_type&lt;2&gt;\\,pstsdk::const_btree_node_iter&lt;unsigned\r\n long\\,pstsdk::node_info&gt; &gt;\\,pstsdk::node_info\\,boost::bidirectional_traversal_tag\\,pstsdk::node_info const \\&amp;\\,int&gt;* i, Int32 __unnamed001) in boost\\iterator\\iterator_facade.hpp:line 732<br>\r\n<br>\r\nThose psts can be open in Outlook, and are not corrupted.</p>\r\n<p>Is there somthing I can do?</p>\r\n<p>Thanks,<br>\r\nSagi.</p>\r\n",
    "PostedDate": "2011-02-13T00:37:45.58-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "565383",
    "ThreadId": "245820",
    "Html": "<p>UPDATE:</p>\r\n<p>Maybe that will help to answer,<br />It worked after doing \"Compact\" to the pst file. but I really want to avoid it.&nbsp;</p>\r\n<p>Is there a way to ignore and skip the gaps that&nbsp;probably found and removed by the compact action?</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-02-13T05:24:25.113-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "565443",
    "ThreadId": "245820",
    "Html": "<p>Doesn't make a whole lot of sense - compacting a PST file shouldn't affect the data in such a way to make this succeed when it fails before. To really be actionable, I'd probably need a copy of the PST file. A repo which didn't involve .net interop would be great too :)</p>",
    "PostedDate": "2011-02-13T08:41:17.827-08:00",
    "UserRole": "Owner",
    "MarkedAsAnswerDate": null
  },
  {
    "Id": "572192",
    "ThreadId": "245820",
    "Html": "<p>That looks like a stack trace from the .NET port we're writing.&nbsp;</p>\r\n<p>Feel free to bring the discussion and issue over there if that's the case...</p>\r\n<p>&nbsp;<a href=\"http://pstsdknet.codeplex.com/\">http://pstsdknet.codeplex.com/</a></p>\r\n<p>&nbsp;</p>\r\n<p>One of the issues that we face with the .NET version is a need to do some upfront iterations to collect NodeIDs, A corrupt PST might not succeed during such an iteration and may be fixed with a compact or by running the ScanPST tool.&nbsp;</p>\r\n<p>&nbsp;</p>\r\n<p>Thanks,</p>\r\n<p>Troy</p>\r\n<p>&nbsp;</p>",
    "PostedDate": "2011-02-25T08:20:50.427-08:00",
    "UserRole": null,
    "MarkedAsAnswerDate": null
  }
]